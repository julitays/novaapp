// src/features/org/OrgStructureView.jsx
import React, { useMemo, useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { initialEmployees } from "../../lib/modules";
import { Button, Input, Select } from "../../components/ui";
import OrgTree from "../../components/tree/OrgTree";
import { buildOrgTree } from "../../lib/orgLevels";

// ‚Äî‚Äî‚Äî —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ‚Äî‚Äî‚Äî
const READY_PCT = 70;
const LS_KEY_PRESETS = "novaapp_employee_filter_presets";
const LS_KEY_PINS = "novaapp_employee_filter_pins";

function applyFilters(list, { role = "–í—Å–µ", readiness = "–í—Å–µ", q = "" }) {
  return list
    .filter((e) => role === "–í—Å–µ" || e.title === role)
    .filter((e) => {
      if (readiness === "–í—Å–µ") return true;
      const pct = e.readiness?.percent ?? 0;
      return readiness === "–ì–æ—Ç–æ–≤—ã (‚â•70%)" ? pct >= READY_PCT : pct < READY_PCT;
    })
    .filter((e) =>
      [e.name, e.title, e.department, e.region].join(" ").toLowerCase().includes((q || "").toLowerCase())
    );
}
function countByPreset(preset) { return applyFilters(initialEmployees, preset).length; }
function loadJSON(key, fallback) { try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) : fallback; } catch { return fallback; } }
function saveJSON(key, val) { localStorage.setItem(key, JSON.stringify(val)); }

const BUILTIN_PRESETS = [
  { id: "_b_1", name: "–ì–æ—Ç–æ–≤—ã–µ –Ω–∞ KAM", role: "KAM", readiness: "–ì–æ—Ç–æ–≤—ã (‚â•70%)", q: "" },
  { id: "_b_2", name: "–†–∞—Å—Ç–∏ ‚Üí GKAM (Electronics)", role: "GKAM (Electronics)", readiness: "–ï—â—ë —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è", q: "" },
  { id: "_b_3", name: "–í—Å–µ RM", role: "RM", readiness: "–í—Å–µ", q: "" },
];

// –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–æ–≤ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
const ROLE_PATHS = [
  {
    lane: "Sales FMCG",
    color: "indigo",
    nodes: [
      { role: "RM", label: "RM" },
      { role: "KAM", label: "KAM" },
      { role: "GKAM (Electronics)", label: "GKAM Electronics" },
    ],
  },
  {
    lane: "Enablement",
    color: "emerald",
    nodes: [
      { role: "TM", label: "TM" },
      { role: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è", label: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–±—É—á–µ–Ω–∏—è" },
    ],
  },
];

export default function OrgStructureView() {
  const navigate = useNavigate();

  // —Ç–∞–±: –∫–∞—Ä—Ç–∞ –∏–ª–∏ –¥–µ—Ä–µ–≤–æ
  const [tab, setTab] = useState("tree"); // "tree" | "map"

  // –ø—Ä–µ—Å–µ—Ç—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
  const [presets, setPresets] = useState(() => loadJSON(LS_KEY_PRESETS, []));
  const [pins, setPins] = useState(() => loadJSON(LS_KEY_PINS, []));
  useEffect(() => { saveJSON(LS_KEY_PRESETS, presets); }, [presets]);
  useEffect(() => { saveJSON(LS_KEY_PINS, pins); }, [pins]);

  // —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
  const [newName, setNewName] = useState("");
  const [newRole, setNewRole] = useState("–í—Å–µ");
  const [newReady, setNewReady] = useState("–í—Å–µ");
  const [newQ, setNewQ] = useState("");

  // –ª–∏–Ω–∑—ã + –ø–æ–∏—Å–∫ –¥–ª—è –¥–µ—Ä–µ–≤–∞
  const [lens, setLens] = useState("readiness"); // readiness | reserve | managerLoad
  const [query, setQuery] = useState("");

  const allPresets = [...BUILTIN_PRESETS, ...presets];
  const pinnedObjects = useMemo(() => {
    const list = pins
      .map((id) => allPresets.find((p) => p.id === id))
      .filter(Boolean)
      .map((p) => ({ ...p, count: countByPreset(p) }));
    return list.sort((a, b) => b.count - a.count || a.name.localeCompare(b.name, "ru"));
  }, [pins, presets]);

  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏–∑ initialEmployees (–≥–æ—Ç–æ–≤–æ –∫ –∑–∞–º–µ–Ω–µ –Ω–∞ –∏–º–ø–æ—Ä—Ç)
  const tree = useMemo(() => buildOrgTree(initialEmployees, { preferManagerId: true }), []);

  function goEmployees(preset) {
    const params = new URLSearchParams();
    if (preset.role && preset.role !== "–í—Å–µ") params.set("role", preset.role);
    if (preset.readiness && preset.readiness !== "–í—Å–µ") {
      params.set("readiness", preset.readiness === "–ì–æ—Ç–æ–≤—ã (‚â•70%)" ? "ready" : "grow");
    }
    if (preset.q) params.set("q", preset.q);
    const qs = params.toString();
    navigate(qs ? `/employees?${qs}` : "/employees");
  }

  function addPreset() {
    if (!newName.trim()) return alert("–î–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç—É");
    const p = { id: `p_${Date.now()}`, name: newName.trim(), role: newRole, readiness: newReady, q: newQ };
    setPresets((prev) => [p, ...prev]);
    setNewName(""); setNewRole("–í—Å–µ"); setNewReady("–í—Å–µ"); setNewQ("");
  }
  function removePreset(id) { setPresets((prev) => prev.filter((p) => p.id !== id)); setPins((prev) => prev.filter((x) => x !== id)); }
  function togglePin(id) { setPins((prev) => prev.includes(id) ? prev.filter((x) => x !== id) : [id, ...prev]); }

  function PresetChip({ p, allowRemove = false }) {
    const cnt = countByPreset(p);
    const pinned = pins.includes(p.id);
    return (
      <div className="flex items-center gap-1 text-xs px-2 py-1 rounded-lg border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900">
        <button className="hover:underline" onClick={() => goEmployees(p)} title={`${p.name} ‚Ä¢ –Ω–∞–π–¥–µ–Ω–æ: ${cnt}`}>{p.name}</button>
        <span className="inline-block rounded bg-slate-100 text-slate-700 px-1">{cnt}</span>
        <button
          className={`ml-1 ${pinned ? "text-amber-600" : "text-slate-500"} hover:underline`}
          title={pinned ? "–û—Ç–∫—Ä–µ–ø–∏—Ç—å" : "–ó–∞–∫—Ä–µ–ø–∏—Ç—å"}
          onClick={() => togglePin(p.id)}
        >
          {pinned ? "üìå" : "üìç"}
        </button>
        {allowRemove && (
          <button className="text-rose-600 hover:underline" title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç" onClick={() => removePreset(p.id)}>√ó</button>
        )}
      </div>
    );
  }

  // ‚Äî‚Äî‚Äî UI ‚Äî‚Äî‚Äî
  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏</h2>
        <div className="flex items-center gap-2">
          <div className="text-sm text-slate-500">–ò–µ—Ä–∞—Ä—Ö–∏—è –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–∞–ª–æ–Ω–∞–º —Ä–æ–ª–µ–π</div>
          <Button variant="ghost" onClick={() => navigate("/succession")}>–ö–∞–¥—Ä–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤</Button>
          <Button variant="ghost" onClick={() => navigate("/employees")}>–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º</Button>
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <div className="flex items-center gap-2">
        <button
          className={`px-3 py-1.5 rounded-xl text-sm border ${tab==="tree" ? "bg-indigo-600 text-white border-indigo-600" : "border-slate-200"}`}
          onClick={() => setTab("tree")}
        >
          –î–µ—Ä–µ–≤–æ
        </button>
        <button
          className={`px-3 py-1.5 rounded-xl text-sm border ${tab==="map" ? "bg-indigo-600 text-white border-indigo-600" : "border-slate-200"}`}
          onClick={() => setTab("map")}
        >
          –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–æ–≤
        </button>
      </div>

      {/* –ü–∏–Ω-–±–æ—Ä–¥ */}
      <div className="rounded-2xl border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="font-medium">–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</div>
          <div className="text-xs text-slate-500">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ —á–∏—Å–ª—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>
        </div>
        {pinnedObjects.length === 0 ? (
          <div className="text-sm text-slate-500">–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –ª—é–±–æ–π –ø—Ä–µ—Å–µ—Ç –Ω–∏–∂–µ (–∏–∫–æ–Ω–∫–æ–π üìç)</div>
        ) : (
          <div className="flex flex-wrap gap-2">{pinnedObjects.map((p) => <PresetChip key={p.id} p={p} />)}</div>
        )}
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã + –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ */}
      <div className="grid grid-cols-1 xl:grid-cols-[1fr_380px] gap-4">
        {/* –ë—ã—Å—Ç—Ä—ã–µ */}
        <div className="rounded-2xl border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 p-4">
          <div className="font-medium mb-2">–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</div>
          <div className="flex flex-wrap gap-2 mb-3">
            {BUILTIN_PRESETS.map((p) => <PresetChip key={p.id} p={p} />)}
          </div>
          <div className="border-top border-slate-100 dark:border-slate-800 pt-3">
            <div className="text-xs uppercase tracking-wide text-slate-500 mb-2">–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</div>
            {presets.length === 0 ? (
              <div className="text-sm text-slate-500">–ü–æ–∫–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∞</div>
            ) : (
              <div className="flex flex-wrap gap-2">
                {presets.map((p) => <PresetChip key={p.id} p={p} allowRemove />)}
              </div>
            )}
          </div>
        </div>
        {/* –°–æ–∑–¥–∞–Ω–∏–µ */}
        <div className="rounded-2xl border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 p-4">
          <div className="font-medium mb-3">–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç</div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <div>
              <div className="text-sm mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
              <Input value={newName} onChange={(e) => setNewName(e.target.value)} placeholder="–ù–∞–ø—Ä., ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ GKAM¬ª" />
            </div>
            <div>
              <div className="text-sm mb-1">–†–æ–ª—å</div>
              <Select value={newRole} onChange={setNewRole} options={["–í—Å–µ", "TM", "RM", "KAM", "GKAM (Electronics)", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è"]} />
            </div>
            <div>
              <div className="text-sm mb-1">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</div>
              <Select value={newReady} onChange={setNewReady} options={["–í—Å–µ", "–ì–æ—Ç–æ–≤—ã (‚â•70%)", "–ï—â—ë —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è"]} />
            </div>
            <div>
              <div className="text-sm mb-1">–ü–æ–∏—Å–∫</div>
              <Input value={newQ} onChange={(e) => setNewQ(e.target.value)} placeholder="–ò–º—è, —Ä–µ–≥–∏–æ–Ω, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞‚Ä¶" />
            </div>
          </div>
          <div className="mt-3 flex items-center gap-2">
            <Button onClick={addPreset}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç</Button>
            <Button variant="ghost" onClick={() => goEmployees({ role: newRole, readiness: newReady, q: newQ })}>
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            </Button>
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç: –¥–µ—Ä–µ–≤–æ –∏–ª–∏ –∫–∞—Ä—Ç–∞ */}
      {tab === "tree" ? (
        <div className="rounded-2xl border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="font-medium">–î–µ—Ä–µ–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</div>
            <div className="flex items-center gap-2">
              <Select value={lens} onChange={setLens} options={["readiness", "reserve", "managerLoad"]} />
              <Input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ä–æ–ª–∏/–æ—Ç–¥–µ–ª—É‚Ä¶" className="w-64" />
            </div>
          </div>
          <OrgTree
            roots={tree.rootNodes}
            lens={lens}
            query={query}
            onOpenEmployee={(id) => navigate(`/employees/${id}`)}
            onFilter={(preset) => goEmployees(preset)}
          />
        </div>
      ) : (
        <div className="rounded-2xl border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 p-4">
          <div className="font-medium mb-2">–ö–∞—Ä—Ç–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤</div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {ROLE_PATHS.map((lane) => (
              <div key={lane.lane} className="rounded-xl border border-slate-200 dark:border-slate-800 p-3">
                <div className="text-sm text-slate-500 mb-2">{lane.lane}</div>
                <div className="grid lg:grid-cols-3 gap-3">
                  {lane.nodes.map((n, i) => (
                    <div key={n.role} className="rounded-xl border border-slate-200 dark:border-slate-700 p-3">
                      <div className="font-medium">{n.label}</div>
                      <div className="mt-2 flex gap-2">
                        <Button variant="ghost" onClick={() => goEmployees({ role: n.role, readiness: "–ì–æ—Ç–æ–≤—ã (‚â•70%)", q: "" })}>
                          –ì–æ—Ç–æ–≤—ã–µ
                        </Button>
                        <Button variant="ghost" onClick={() => goEmployees({ role: n.role, readiness: "–ï—â—ë —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è", q: "" })}>
                          –ü—Ä–æ–∫–∞—á–∞—Ç—å
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
